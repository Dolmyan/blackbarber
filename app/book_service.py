import logging

from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton
from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from config import *
from database import BotDB

db = BotDB('blackbarber.db')
router = Router()
bot = Bot(token=TG_TOKEN)

logger = logging.getLogger(__name__)


def get_weekday_name(day_number: int) -> str:
    days = {
        1: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–≤—Ç–æ—Ä–Ω–∏–∫",
        3: "—Å—Ä–µ–¥—É",
        4: "—á–µ—Ç–≤–µ—Ä–≥",
        5: "–ø—è—Ç–Ω–∏—Ü—É",
        6: "—Å—É–±–±–æ—Ç—É",
        7: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return days.get(day_number)


def get_weekday_name_imen(day_number: int) -> str:
    weekdays = {
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–í—Ç–æ—Ä–Ω–∏–∫",
        3: "–°—Ä–µ–¥–∞",
        4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞",
        6: "–°—É–±–±–æ—Ç–∞",
        7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return weekdays.get(day_number)


def get_available_time_keyboard(available_times, data=None):
    keyboard = []
    row = []

    for i, time_slot in enumerate(available_times, 1):
        button = InlineKeyboardButton(
                text=time_slot,
                callback_data=f"time_{time_slot.replace(':', '').replace(' ', '').replace('-', '_')}"
        )
        row.append(button)
        if len(row) == 2:  # –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            keyboard.append(row)
            row = []

    if row:  # –¥–æ–±–∞–≤–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        keyboard.append(row)
    if data:
        keyboard.append([
            InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data=f"selected_service_{data.get('service')}"),
        ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(F.text == '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É')
async def book_service(message: Message, state: FSMContext):
    services = db.get_services()
    keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=service, callback_data=f"selected_service_{service}")]
                for service in services
            ]
    )

    await message.answer(
            "üõçÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
    )


@router.callback_query(lambda c: c.data in ["book_service"])
async def book_service(callback_query: CallbackQuery, state: FSMContext):
    services = db.get_services()
    keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=service, callback_data=f"selected_service_{service}")]
                for service in services
            ]
    )

    await callback_query.message.edit_text(
            "üõçÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
    )


@router.callback_query(lambda c: c.data.startswith("selected_service_"))
async def service_chosen(callback_query: CallbackQuery, state: FSMContext):
    service = callback_query.data.removeprefix("selected_service_")
    await state.update_data(service=service)
    button = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day_1"),
            InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day_2"),
            InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="day_3"),
            InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="day_4")
        ],
        [
            InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day_5"),
            InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="day_6"),
            InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="day_7")
        ],
        [
            InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥", callback_data="book_service"),
        ]
    ])
    await callback_query.message.edit_text(
            "üìÜ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</b>",
            reply_markup=button,
            parse_mode='HTML'
    )


@router.callback_query(lambda c: c.data.startswith('day_'))
async def day_chosen(callback_query: CallbackQuery, state: FSMContext):
    day = callback_query.data.removeprefix("day_")
    await state.update_data(day=day)
    day_name = get_weekday_name(int(day))

    available_times = db.get_available_times(day)
    data = await state.get_data()
    keyboard = get_available_time_keyboard(available_times=available_times, data=data)
    await callback_query.message.edit_text(
            f"üìÜ <b>–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ {day_name}</b>",
            reply_markup=keyboard,
            parse_mode='HTML'
    )


@router.callback_query(lambda c: c.data.startswith("time_"))
async def time_chosen(callback_query: CallbackQuery, state: FSMContext):
    raw_time = callback_query.data.removeprefix("time_")
    formatted_time = f"{raw_time[:2]}:{raw_time[2:]}"  # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º "1200" –≤ "12:00"

    await state.update_data(time=formatted_time)



    keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    await callback_query.message.answer(
            text="<b>üìû –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=keyboard,
            parse_mode='HTML'
    )


@router.message(F.contact)
async def handle_contact(message: Message, state: FSMContext):
    contact = message.contact
    user_id = message.from_user.id
    await state.update_data(phone_number=contact.phone_number)


    data = await state.get_data()
    service = data.get("service")
    time=data.get("time")
    day = get_weekday_name_imen(int(data.get("day")))
    button = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É")],
                [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º")],
            ], resize_keyboard=True
    )
    await message.answer(text='–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!',reply_markup=button)
    await message.answer(
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</b>\n"
        f"üíá –£—Å–ª—É–≥–∞: {service}\n"
        f"üìÜ –î–µ–Ω—å: {day}\n"
        f"üïê –í—Ä–µ–º—è: {time}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"day_{data.get('day')}")]
        ]),
        parse_mode='HTML',
)

@router.callback_query(lambda c: c.data in ["confirm_booking"])
async def time_chosen(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    service = data.get("service")
    time = data.get("time")
    day = get_weekday_name_imen(int(data.get("day")))


    print(data)
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or ""
    first_name = callback_query.from_user.first_name or ""
    last_name = callback_query.from_user.last_name or ""

    service = data.get("service")
    day = int(data.get("day"))
    time = data.get("time")
    phone_number = data.get("phone_number")
    appointment_id=db.add_appointment(
        user_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name,
        service=service,
        day_of_week=day,
        time=time,
        phone_number=phone_number
    )
    button2 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"admin_cancel_{appointment_id}")],
    ])
    await callback_query.message.edit_text(text='–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n'
        f"üíá –£—Å–ª—É–≥–∞: {service}\n"
        f"üìÜ –î–µ–Ω—å: {day}\n"
        f"üïê –í—Ä–µ–º—è: {time}\n\n", reply_markup=button2)

    full_name = f"{first_name} {last_name}".strip()
    tg_profile = f"@{username}" if username else f"<code>{user_id}</code>"

    text = (
        "<b>üì• –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å</b>\n\n"
        f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {full_name}\n"
        f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> {tg_profile}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number}\n"
        f"<b>ID:</b> {appointment_id}\n\n"

        f"<b>–£—Å–ª—É–≥–∞:</b> {service}\n"
        f"<b>–î–µ–Ω—å:</b> {get_weekday_name_imen(day)}\n"
        f"<b>–í—Ä–µ–º—è:</b> {time}"
    )

    button = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{appointment_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{appointment_id}")
        ],
    ])

    await bot.send_message(chat_id=admin_id, text=text, reply_markup=button, parse_mode="HTML")